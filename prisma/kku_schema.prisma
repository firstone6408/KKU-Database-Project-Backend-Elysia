generator client {
    provider = "prisma-client-js"
    output   = "./generated/kku_client"
}

datasource db {
    provider = "mysql"
    url      = env("KKU_DATABASE_URL")
}

enum UserRole {
    ADMIN
    MANAGER
    STAFF
    TRANSPORTER
}

enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
}

enum StockInType {
    RETURN // การคืนสินค้า
    ORDER // การสั่งซื้อ
    OTHER // อื่นๆ
}

enum StockOutType {
    SALE
}

enum OrderStatus {
    PENDING // รอดำเนินการ
    COMPLETED // สำเร็จ
    CANCELLED // ยกเลิก
    REFUNDED // คืนของ
    DELIVERING // การจัดส่งกำลังดำเนินการ
    UNPAID // ค้างชำระ
}

enum OrderType {
    FULL_PAYMENT // จ่ายเต็มจำนวน ไม่มีมัดจำ ไม่มีเครดิต
    DEPOSITED // จ่ายมัดจำแล้ว แต่ยังไม่จ่ายครบ
    CREDIT_USED // ใช้เครดิตในการชำระเงิน (เครดิตของร้านหรือยอดค้าง)
    DEPOSITED_CREDIT_USED // จ่ายมัดจำ+ใช้เครดิต
}

enum DeliveryType {
    STANDARD
    EXPRESS
}

enum DeliveryStatus {
    PENDING // รอดำเนินการจัดส่ง (ยังไม่เริ่มจัดส่ง)
    IN_TRANSIT // อยู่ระหว่างการจัดส่ง (กำลังเดินทาง)
    DELIVERED // ส่งถึงลูกค้าแล้ว
    CANCELED // ยกเลิกการจัดส่ง
    DELAYED // การจัดส่งล่าช้า
}

enum ProductUnit {
    METER
    PIECE
}

model Branch {
    id          String   @id @default(uuid())
    branchCode  String   @unique
    name        String   @unique
    phoneNumber String
    address     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    User              User[]
    Customer          Customer[]
    Stock             Stock[]
    ProductSaleBranch ProductSaleBranch[]
    Order             Order[]
    StockInHistory    StockInHistory[]
}

model User {
    id           String     @id @default(uuid())
    username     String     @unique
    email        String     @unique
    password     String
    name         String
    profileImage String?
    phoneNumber  String?
    role         UserRole
    status       UserStatus @default(ACTIVE)
    lastLogin    DateTime?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    branchId String?
    branch   Branch? @relation(fields: [branchId], references: [id])

    Customer             Customer[]
    Order                Order[]
    DeliveryDriver       DeliveryDriver[]
    StockInHistory       StockInHistory[] @relation(name: "CreatedByUser")
    CancelStockInHistory StockInHistory[] @relation(name: "CanceledByUser")
}

model CustomerGroup {
    id        String   @id @default(uuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Customer Customer[]
}

model Customer {
    id           String   @id @default(uuid())
    customerCode String   @unique
    name         String
    phoneNumber  String
    address      String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    customerGroupId String
    customerGroup   CustomerGroup @relation(fields: [customerGroupId], references: [id])
    branchId        String
    branch          Branch        @relation(fields: [branchId], references: [id])
    userId          String
    user            User          @relation(fields: [userId], references: [id])
    Order           Order[]
}

model Category {
    id           String   @id @default(uuid())
    categoryCode String   @unique
    name         String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    Product Product[]
}

model Product {
    id          String      @id @default(uuid())
    barcode     String      @unique
    productCode String      @unique
    name        String
    model       String?
    size        String?
    description String?
    image       String?
    isDeleted   Boolean     @default(false)
    deletedAt   DateTime?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    unit        ProductUnit @default(PIECE)

    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])

    Stock             Stock[]
    ProductSaleBranch ProductSaleBranch[]
    StockInItem       StockInItem[]
    StockOutHistory   StockOutHistory[]
}

model Stock {
    id        String   @id @default(uuid())
    quantity  Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productId String
    product   Product @relation(fields: [productId], references: [id])
    branchId  String
    branch    Branch  @relation(fields: [branchId], references: [id])

    StockOutHistory StockOutHistory[]
    StockInItem     StockInItem[]

    @@unique([productId, branchId]) // เพิ่ม unique composite key ให้ทั้งสอง
}

model StockInHistory {
    id          String      @id @default(uuid())
    refCode     String      @unique
    distributor String
    totalPrice  Float
    type        StockInType
    note        String?
    createdAt   DateTime    @default(now())

    isCanceled Boolean   @default(false)
    canceledAt DateTime?
    cancelNote String?

    canceledBy     String?
    canceledByUser User?         @relation(fields: [canceledBy], references: [id], name: "CanceledByUser")
    userId         String
    user           User          @relation(fields: [userId], references: [id], name: "CreatedByUser")
    branchId       String
    branch         Branch        @relation(fields: [branchId], references: [id])
    StockInItem    StockInItem[]
}

model StockInItem {
    stockInHistoryId String
    stockInHistory   StockInHistory @relation(fields: [stockInHistoryId], references: [id])
    productId        String
    product          Product        @relation(fields: [productId], references: [id])
    stockId          String
    stock            Stock          @relation(fields: [stockId], references: [id])

    costPrice Float
    quantity  Int

    @@unique([stockInHistoryId, productId])
}

model StockOutHistory {
    id        String       @id @default(uuid())
    quantity  Int
    type      StockOutType
    note      String?
    sellPrice Float
    createdAt DateTime     @default(now())

    productId String
    product   Product @relation(fields: [productId], references: [id])
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id])
    stockId   String
    stock     Stock   @relation(fields: [stockId], references: [id])
}

model ProductSaleBranch {
    sellPrice Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productId String
    product   Product @relation(fields: [productId], references: [id])
    branchId  String
    branch    Branch  @relation(fields: [branchId], references: [id])

    @@unique([productId, branchId])
}

model Order {
    id         String      @id @default(uuid())
    orderCode  String
    totalPrice Float?
    status     OrderStatus @default(PENDING)
    type       OrderType?
    note       String?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    customerId String
    customer   Customer @relation(fields: [customerId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    branchId   String
    branch     Branch   @relation(fields: [branchId], references: [id])

    StockOutHistory StockOutHistory[]
    Delivery        Delivery?
    PaymentOrder    PaymentOrder?

    @@unique([customerId, userId, branchId, orderCode])
}

model PaymentMethod {
    id        String   @id @default(uuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PaymentOrder PaymentOrder[]
}

model PaymentOrder {
    orderId String @unique
    order   Order  @relation(fields: [orderId], references: [id])

    amountRecevied Float?
    change         Float?
    deposit        Float?
    credit         Int?
    discount       Float?
    createdAt      DateTime  @default(now())
    paidAt         DateTime?

    paymentMethodId  String
    paymentMethod    PaymentMethod      @relation(fields: [paymentMethodId], references: [id])
    PaymentOrderSlip PaymentOrderSlip[]
}

model PaymentOrderSlip {
    id       String @id @default(uuid())
    imageUrl String @unique

    paymentOrderId String
    paymentOrder   PaymentOrder @relation(fields: [paymentOrderId], references: [orderId])
    createdAt      DateTime     @default(now())
}

model Delivery {
    orderId String @unique
    order   Order  @relation(fields: [orderId], references: [id])

    trackNumber String         @unique
    address     String
    fee         Float          @default(0)
    distance    Float
    status      DeliveryStatus @default(PENDING)
    type        DeliveryType
    lng         Float
    lat         Float
    note        String?
    sendDate    DateTime
    completedAt DateTime?
    updatedAt   DateTime       @updatedAt

    DeliveryDriver DeliveryDriver[]
}

model DeliveryDriver {
    deliveryId String
    userId     String

    delivery Delivery @relation(fields: [deliveryId], references: [orderId], onDelete: Cascade)
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    assignedAt DateTime @default(now())

    @@id([deliveryId, userId])
}
