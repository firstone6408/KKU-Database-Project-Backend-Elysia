generator client {
    provider = "prisma-client-js"
    output   = "./generated/kku_client"
}

datasource db {
    provider = "mysql"
    url      = env("KKU_DATABASE_URL")
}

enum UserRole {
    ADMIN
    MANAGER
    STAFF
}

enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
}

enum StockInType {
    RETURN // การคืนสินค้า
    ORDER // การสั่งซื้อ
    OTHER // อื่นๆ
}

enum StockOutType {
    SALE
}

enum OrderStatus {
    PENDING
    COMPLETED
    CANCELLED
    REFUNDED
}

model Branch {
    id          String   @id @default(uuid())
    branchCode  String   @unique
    name        String   @unique
    phoneNumber String
    address     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    User              User[]
    Customer          Customer[]
    Stock             Stock[]
    ProductSaleBranch ProductSaleBranch[]
    Order             Order[]
}

model User {
    id           String     @id @default(uuid())
    username     String     @unique
    email        String     @unique
    password     String
    name         String
    profileImage String?
    phoneNumber  String?
    role         UserRole
    status       UserStatus @default(ACTIVE)
    lastLogin    DateTime?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    branchId String?
    branch   Branch? @relation(fields: [branchId], references: [id])

    Customer       Customer[]
    StockInHistory StockInHistory[]
    Order          Order[]
}

model CustomerGroup {
    id        String   @id @default(uuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Customer Customer[]
}

model Customer {
    id           String   @id @default(uuid())
    customerCode String   @unique
    name         String
    phoneNumber  String
    address      String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    customerGroupId String
    customerGroup   CustomerGroup @relation(fields: [customerGroupId], references: [id])
    branchId        String
    branch          Branch        @relation(fields: [branchId], references: [id])
    userId          String
    user            User          @relation(fields: [userId], references: [id])
    Order           Order[]
}

model Category {
    id           String   @id @default(uuid())
    categoryCode String   @unique
    name         String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    Product Product[]
}

model Product {
    id          String    @id @default(uuid())
    productCode String    @unique
    name        String    @unique
    description String?
    image       String?
    isDeleted   Boolean   @default(false)
    deletedAt   DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])

    Stock             Stock[]
    ProductSaleBranch ProductSaleBranch[]
    OrderItem         OrderItem[]
}

model Stock {
    id        String   @id @default(uuid())
    quantity  Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productId String
    product   Product @relation(fields: [productId], references: [id])
    branchId  String
    branch    Branch  @relation(fields: [branchId], references: [id])

    StockInHistory  StockInHistory[]
    StockOutHistory StockOutHistory[]

    @@unique([productId, branchId]) // เพิ่ม unique composite key ให้ทั้งสอง
}

model StockInHistory {
    id        String      @id @default(uuid())
    refCode   String      @unique
    costPrice Float
    quantity  Int
    type      StockInType
    note      String?
    createdAt DateTime    @default(now())

    stockId String
    stock   Stock  @relation(fields: [stockId], references: [id])
    userId  String
    user    User   @relation(fields: [userId], references: [id])
}

model StockOutHistory {
    id        String       @id @default(uuid())
    quantity  Int
    type      StockOutType
    note      String?
    createdAt DateTime     @default(now())

    stockId String
    stock   Stock  @relation(fields: [stockId], references: [id])
}

model ProductSaleBranch {
    sellPrice Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productId String
    product   Product @relation(fields: [productId], references: [id])
    branchId  String
    branch    Branch  @relation(fields: [branchId], references: [id])

    @@unique([productId, branchId])
}

model Order {
    id         String      @id @default(uuid())
    totalPrice Float?
    status     OrderStatus @default(PENDING)
    note       String?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    paymentOrderId String?
    paymentOrder   PaymentOrder? @relation(fields: [paymentOrderId], references: [id])
    customerId     String
    customer       Customer      @relation(fields: [customerId], references: [id])
    userId         String
    user           User          @relation(fields: [userId], references: [id])
    branchId       String
    branch         Branch        @relation(fields: [branchId], references: [id])

    OrderItem OrderItem[]

    @@unique([customerId, userId, branchId])
}

model OrderItem {
    orderId   String
    order     Order    @relation(fields: [orderId], references: [id])
    sellPrice Float
    quantity  Int
    createdAt DateTime @default(now())

    productId String
    product   Product @relation(fields: [productId], references: [id])

    @@unique([orderId, productId])
}

model PaymentMethod {
    id        String   @id @default(uuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PaymentOrder PaymentOrder[]
}

model PaymentOrder {
    id             String   @id @default(uuid())
    amountRecevied Float
    change         Float
    createdAt      DateTime @default(now())

    paymentMethodId String
    paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

    Order Order[]
}
